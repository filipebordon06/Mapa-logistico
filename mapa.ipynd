############# PRIMEIRA PARTE, SÉRIES TEMPORAIS E PONTOS DE ESTABILIDADE ################

import numpy as np
import matplotlib.pyplot as plt
from ipywidgets import interact, widgets

# Parâmetros fixos
x0 = 0.5
iteracoes = 100

# Define o mapa logístico
def mapa(a, x):
    return a * x * (1 - x)

# Plot interativo com controle apenas do parâmetro 'a'
@interact(
    a=widgets.FloatSlider(value=3.58,
                         min=1.0,
                         max=3.999,
                         step=0.001,
                         description='Parâmetro a',
                         readout_format='.3f',
                         continuous_update=False)
)
def plot_mapa_logistico(a):
    # Gera as iterações
    x = np.zeros(iteracoes + 1)
    x[0] = x0

    for i in range(iteracoes):
        x[i+1] = mapa(a, x[i])

    # Cria a figura
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))

    # Configurações do gráfico
    ax1.plot(range(iteracoes + 1), x, 'b-', linewidth=0.5, alpha=0.7)
    ax1.set_title(f'Série temporal (a = {a:.4f})')
    ax1.set_xlabel('Iteração')
    ax1.set_ylabel('Valor de x')
    ax1.grid(True, alpha=0.3)

    ax2.plot([a]*100, x[-100:], 'b.', markersize=1, alpha=0.5)
    ax2.set_title('Comportamento')
    ax2.set_xlabel('Parametro a')
    ax2.set_ylabel('Valores estáveis')
    ax2.grid(True, alpha=0.3)

    # Adiciona informações sobre o comportamento
    if a < 3.0:
        plt.text(0.02, 0.95, "Convergência para ponto fixo", transform=plt.gca().transAxes,
                bbox=dict(facecolor='yellow', alpha=0.5))
    elif 3.0 <= a < 3.56995:
        plt.text(0.02, 0.95, "Comportamento periódico", transform=plt.gca().transAxes,
                bbox=dict(facecolor='orange', alpha=0.5))
    else:
        plt.text(0.02, 0.95, "Região caótica", transform=plt.gca().transAxes,
                bbox=dict(facecolor='red', alpha=0.5))

    plt.show()


############# SEGUNDA PARTE, MAPA DE BIFURCAÇÃO ################


# Define o mapa logístico
def mapa_logistico(a, x):
    return a * x * (1 - x)

# Parâmetros para o gráfico de bifurcação
a_min = 0
a_max = 4
num_a = 1000
iteracoes = 1000
transiente = 800  # Número de iterações para descartar (transiente)

# Array de valores de a
a_values = np.linspace(a_min, a_max, num_a)

# Configuração do gráfico
plt.figure(figsize=(12, 8))

# Para cada valor de a, calculamos as iterações
for a in a_values:
    x = 0.5
    # Descartamos as primeiras iterações (transiente)
    for _ in range(transiente):
        x = mapa_logistico(a, x)
    # Plotamos as próximas iterações
    for _ in range(iteracoes - transiente):
        x = mapa_logistico(a, x)
        plt.plot(a, x, ',k', alpha=0.25)

# Configurações do gráfico
plt.title('Diagrama de Bifurcação do Mapa Logístico')
plt.xlabel('Parâmetro a')
plt.ylabel('Valores estáveis de x')
plt.grid(True, alpha=0.3)
plt.show()


############# TERCEIRA PARTE, CICLO 3 DE ESTABILIDADE ################


# Define o mapa logístico
def mapa_logistico(a, x):
    return a * x * (1 - x)

# Parâmetros para o gráfico de bifurcação
a_min = 3.82
a_max = 3.865
num_a = 1000
iteracoes = 1000
transiente = 800  # Número de iterações para descartar (transiente)

# Array de valores de a
a_values = np.linspace(a_min, a_max, num_a)

# Configuração do gráfico
plt.figure(figsize=(12, 8))

# Para cada valor de a, calculamos as iterações
for a in a_values:
    x = 0.5  # Valor inicial fixo
    # Descartamos as primeiras iterações (transiente)
    for _ in range(transiente):
        x = mapa_logistico(a, x)
    # Plotamos as próximas iterações
    for _ in range(iteracoes - transiente):
        x = mapa_logistico(a, x)
        plt.plot(a, x, ',k', alpha=0.25)
# Configurações do gráfico
plt.plot(a, x, '.', markersize=1, color='black', alpha=0.2)
plt.title('Diagrama de Bifurcação do Mapa Logístico')
plt.xlabel('Parâmetro a')
plt.ylabel('Valores estáveis de x')
#plt.ylim(0.14,0.98)
plt.tight_layout()
plt.grid(True, alpha=0.3)
plt.show()

############# QUARTA PARTE, ESTABILIDADE DO PONTO INSTÁVEL 1-PERIÓDICO ################

def mapa_controlado(a, x, k, x_hat):
    u = k * (x - x_hat)
    result = a * x * (1 - x) + u

    # Verifica se o número é finito (evita NaN ou Inf)
    if not np.isfinite(result):
        return x_hat  # reinicializa no ponto fixo instável

    # Clipping para evitar explosões: faixa segura [-2, 3]
    result = np.clip(result, -2, 3)

    return result

# Parâmetros
a = 3.7
x_hat = 1 - 1/a  # ponto fixo instável ~0.7297
k_values = np.linspace(0, 3, 1000)
iterations = 1000
last = 100

# Gráfico
plt.figure(figsize=(10, 6))

for k in k_values:
    x = 0.5  # condição inicial

    # Iterações para remover o transiente
    for _ in range(iterations - last):
        x = mapa_controlado(a, x, k, x_hat)
        if abs(x) > 1e3 or not np.isfinite(x):
            x = x_hat  # reinicia se explodir numericamente

    # Coleta dos últimos valores para o gráfico
    xs = []
    for _ in range(last):
        x = mapa_controlado(a, x, k, x_hat)
        if 0 <= x <= 1:
            xs.append(x)
        else:
            break  # ignora valores instáveis
    if xs:  # só plota se os dados forem válidos
        plt.plot([k]*len(xs), xs, ',k', alpha=0.25)

plt.title('Diagrama de bifurcação do mapa logístico controlado')
plt.xlabel('k (coeficiente de feedback)')
plt.ylabel('x')
plt.xlim([0, 3])
plt.ylim([0, 1])
plt.grid(True)
plt.tight_layout()
plt.show()

############# QUINTA PARTE, ESTABILIDADE OCASIONAL DO SISTEMA ################

def sistema_ocasional(a, x, k, x_hat, N, n):
    # Controle ocasional com saturação de u
    if n % N == 0:
        u = k * (x - x_hat)
        result = a * x * (1 - x) + u
    else:
        result = a * x * (1 - x)

    # Verificação de valores finitos
    if not np.isfinite(result):
        return x_hat  # retorna ao ponto fixo se ocorrer overflow

    # Saturação suave para manter x em faixa segura
    result = np.clip(result, -1, 2)  # valores além disso causam instabilidade
    return result

# Parâmetros do mapa
a = 3.7
x_hat = 1 - 1/a  # ponto fixo do mapa logístico para esse a
N = 3
k_values = np.linspace(1.0, 2.2, 1000)  # faixa de valores de k
iterations = 5000
last = 300

# Gráfico
plt.figure(figsize=(10, 6))

for k in k_values:
    x = x_hat + np.random.uniform(-0.01, 0.01)  # pequena perturbação inicial

    # Iterações para estabilizar o sistema
    for n in range(iterations - last):
        x = sistema_ocasional(a, x, k, x_hat, N, n)
        if abs(x) > 1e3 or not np.isfinite(x):
            x = x_hat  # reinicia caso ocorra instabilidade

    # Coleta dos últimos valores para o diagrama
    xs = []
    for n in range(iterations - last, iterations):
        x = sistema_ocasional(a, x, k, x_hat, N, n)
        if 0 <= x <= 1:  # apenas valores dentro do intervalo
            xs.append(x)
        else:
            break  # interrompe se sair da faixa útil
    if xs:  # plota apenas se tiver pontos válidos
        plt.plot([k] * len(xs), xs, ',k', alpha=0.15)

# Personalização do gráfico
plt.title('Diagrama de bifurcação do sistema ocasional com controle')
plt.xlabel('k (coeficiente de feedback)')
plt.ylabel('x')
plt.xlim([1.0, 2.2]) #conforme k aumenta o feedback fica mais forte e o sistema pode entrar em oscilações podendo transicionar a um regime caótico
plt.ylim([0.45, 1])
plt.grid(True)
plt.tight_layout()
plt.show()
